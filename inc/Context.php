<?php
/**
 * Class Context
 *
 * @package GoogleAuthForWP\Context;
 */

namespace GoogleAuthForWP;

/**
 * Class representing the main context for the plugin
 *
 * @since 1.0.0
 * @access private
 * @ignore
 */
final class Context {


	/**
	 * Version of the plugin
	 *
	 * @var string
	 */
	public string $version = '1.0.0';

	/**
	 * Directory of the plugin
	 *
	 * @var string
	 */
	public string $plugin_file;

	/**
	 * Script tags to have module tag;
	 *
	 * @var array
	 */
	public array $module_scripts = array( 'admin', 'vite', 'login-google' );

	/**
	 * Manifest file generated by vite.
	 *
	 * @var array
	 */
	public ?array $manifest = null;

	/**
	 * Create an instance of the context class
	 *
	 * @param string $plugin_file Main plugin file.
	 * @throws \Exception Throws an exception if plugin directory is given.
	 */
	public function __construct( string $plugin_file ) {
		if ( null === $plugin_file || empty( $plugin_file ) ) {
			throw new \Exception( __CLASS__ . "can't be initiated without the plugin path" );
		}
		$this->plugin_file = $plugin_file;

		add_action( 'wp_loaded', array( $this, 'register_assets' ) );
	}

	/**
	 * Get the plugin or the given folder/file path
	 *
	 * @param string $path The path to a file or leave empty to get the main plugin path.
	 * @return string
	 */
	public function plugin_dir( string $path = '' ) {
		return trailingslashit( plugin_dir_path( $this->plugin_file ) . $path );
	}

	/**
	 * Get the plugin or the given folder/file url
	 *
	 * @param string $path The path to a file or leave empty to get the main plugin path.
	 * @return string
	 */
	public function plugin_dir_url( string $path = '' ) {
		return plugin_dir_url( $this->plugin_file ) . $path;
	}

	/**
	 * Filter function to mark script tags as modules.
	 *
	 * @param string $html The html output.
	 * @param string $handle Handle of the script.
	 * @return string
	 */
	public function module_script_loader( $html, $handle ) {
		if ( ! in_array( str_replace( 'slwg-', '', $handle ), $this->module_scripts, true ) ) {
			return $html;
		}
		return str_replace( '<script ', ' <script type="module"', $html );
	}

	/**
	 * Register assets for the plugin.
	 *
	 * @return void
	 */
	public function register_assets() {
		if ( 'development' === wp_get_environment_type() ) {
			add_filter( 'script_loader_tag', array( $this, 'module_script_loader' ), 10, 2 );
            // phpcs:ignore
            wp_register_script('slwg-vite', 'http://localhost:5173/@vite/client', array(), null, false);
			wp_add_inline_script(
				'slwg-vite',
				"import RefreshRuntime from 'http://localhost:5173/@react-refresh'
                RefreshRuntime.injectIntoGlobalHook(window)
                window.\$RefreshReg$ = () => {}
                window.\$RefreshSig$ = () => (type) => type
                window.__vite_plugin_react_preamble_installed__ = true",
				'before'
			);

            // phpcs:ignore
            wp_register_script('slwg-admin', 'http://localhost:5173/src/admin/index.tsx', array('slwg-vite'), null, false);
			wp_localize_script(
				'slwg-admin',
				'slwg_admin',
				array(
					'adminurl'       => admin_url(),
					'pluginAdminUrl' => admin_url( 'admin.php' ),
					'ajaxUrl'        => admin_url( 'admin-ajax.php' ),
					'rest_url'       => esc_url_raw( rest_url() ),
					'rest_nonce'     => wp_create_nonce( 'wp_rest' ),
				)
			);

			wp_register_script( 'slwg-login-google', 'http://localhost:5173/src/google/index.ts', array( 'slwg-vite' ), $this->version, true );
		} else {
			wp_register_style( 'slwg-admin', $this->get_manifest_file( 'src/admin.css' ), array(), $this->version, 'all' );
			wp_register_script( 'slwg-admin', $this->get_manifest_file( 'src/admin.tsx' ), array(), $this->version, true );

			wp_register_style( 'slwg-login-google', $this->get_manifest_file( 'src/google/index.css' ), array(), $this->version, 'all' );
			wp_register_script( 'slwg-login-google', $this->get_manifest_file( 'src/google/index.ts' ), array(), $this->version, true );
		}
	}

	/**
	 * Fetch file from vite manifest.
	 *
	 * @param string $name Name of the file.
	 * @return string
	 */
	public function get_manifest_file( string $name ) {
		if ( ! $this->manifest ) {
			ob_start();
			include $this->plugin_dir( 'dist/manifest.json' );
			$this->manifest = json_decode( ob_get_clean(), true );
		}
		return plugin_dir_url( $this->manifest[ $name ]['file'] );
	}
}